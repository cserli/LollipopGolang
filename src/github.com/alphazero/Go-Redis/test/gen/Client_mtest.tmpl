//   Copyright 2009-2012 Joubin Houshyar
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

{{$spec_norediserror := .Spec.NoRedisErr}}
{{$spec_nonilresult := .Spec.NoNilResultValue}}
{{$mname := .Method}}
{{$ctype := .Type.Name}}

// Test {{$ctype}}.{{$mname}} method
// This is a generated file - do not modify.
package {{$ctype}}

import (
    "redis"
    "redis/test"
    "testing"
	"testing/quick"
	"fmt"
)

func Test{{$mname}}(t *testing.T) {

    {{if .Spec.NoPanics}}
    defer func() {
        pe := recover(); if pe != nil {
            t.Fatalf("recovered panic in Test{{.Method}} - %s", pe)
        }
    }()
    {{end}}

    tname := "Test{{$mname}}"
	fmt.Printf("TEST: {{.Type}} - %s ...\n", tname)

	c := test.New{{$ctype}}(t)
	test.Flush{{$ctype}}(t, c)
	{{$outcnt := .OutCnt}}{{$incnt := .InCnt}}

    /* -- quick test -- */
	f := func({{range $in_idx, $in_type := .InArgs}}arg_{{$in_idx}} {{$in_type}}{{comma $in_idx $incnt}}{{end}}) (bool) {
        {{if .Spec.NoPanics}}
        // Spec: No Panics
        defer func() {
            pe := recover(); if pe != nil {
                t.Fatal("BUG - {{$mname}}() panicked - %s", pe)
            }
        }()
        {{end}}

	    test.Flush{{$ctype}}(t, c)

        {{$outcnt := .OutCnt}}{{range $out_idx, $out_arg := .OutArgs}}
        var r{{$out_idx}} {{$out_arg.Type}}{{end}}

    	{{range $out_idx, $out_arg := .OutArgs}}r{{$out_idx}}{{comma $out_idx $outcnt}}{{end}} = c.{{$mname}}({{range $in_idx, $in_type := .InArgs}}arg_{{$in_idx}}{{comma $in_idx $incnt}}{{end}})

        {{range $out_idx, $out_arg := .OutArgs}}{{if isRedisError $out_arg.Type}}
        // check redis.Error
        if r{{$out_idx}} != nil {
        {{if $spec_norediserror}}
            // Spec: should never return redis.Error
            t.Errorf("Client error - {{$mname}}() - %s", r{{$out_idx}})
            return false
        }
        {{else}}
           // Spec: OK to return redis.Error - log it
           fmt.Printf("WARN: error result on {{$mname}} - %s\n", r{{$out_idx}})
        }
        {{end}}{{end}}{{end}}
        {{range $out_idx, $out_arg := .OutArgs}}{{if isRedisError $out_arg.Type}}{{else}}
        // check result value
        if r{{$out_idx}} {{zvTest $out_arg.Type}} {
        {{if $spec_nonilresult}}
            // Spec: no zerovalue result
            t.Errorf("Client error - {{$mname}}() - r{{$out_idx}}) is nil")
            return false
        }
        {{else}}
           // Spec: OK to return zero value - log it
           fmt.Printf("WARN: nil/zerovalue result on {{$mname}} for func out r{{$out_idx}}\n")
        }
        {{end}}{{end}}{{end}}

        return true
	}
	if err := quick.Check(f, test.QuickConf{{$ctype}}("{{.Method}}")); err != nil {
		t.Error(err)
	}
	/* -- end quick test -- */

	/* -- begin test specific -- */
	/* -- uncomment and complete
	test.Flush{{$ctype}}(t, c)

	{{range $in_idx, $in_type := .InArgs}}
    var arg_{{$in_idx}} {{$in_type}}{{end}}
    {{range $out_idx, $out_arg := .OutArgs}}
    var r{{$out_idx}} {{$out_arg.Type}}{{end}}

	{{range $out_idx, $out_arg := .OutArgs}}r{{$out_idx}}{{comma $out_idx $outcnt}}{{end}} = c.{{.Method}}({{range $in_idx, $in_type := .InArgs}}arg_{{$in_idx}}{{comma $in_idx $incnt}}{{end}})
    {{range $out_idx, $out_arg := .OutArgs}}{{if isRedisError $out_arg.Type}}if r{{$out_idx}} != nil {
       t.Fatalf("error - {{$mname}}() - %s", r{{$out_idx}})
    }
    {{end}}{{end}}
	*/
	/* -- end test specific -- */

    {{if isQuit $mname}}
    {{else}}
    // flush and stop client
	test.FlushAndQuit{{$ctype}}(t, c){{end}}
}
{{/*}} sync-client-template {{*/}}